x2=c(1,2,4)
p2=theta*exp(-theta*x2)
points(x2,p2,col="blue",pch="*",cex=2)
xx=c(1,2,4)
theta=1
p2=theta*exp(-theta*xx)
points(xx,p2,col="blue",pch="*",cex=2)
x=seq(0,4,length=100)
theta=1
p=theta*exp(-theta*x)
plot(x,p,type="l",main="exponential distribution")
```
2b
```{r}
x2=c(1,2,4)
theta=1
p2=theta*exp(-theta*x2)
points(x2,p2,col="blue",pch="*",cex=2)
```
theta2=2
p3=theta2*exp(-theta2*x)
plot(x,p3,type="l",main="exponential distribution")
p4=theta2*exp(-theta2*x2)
points(x2,p4,col="red",pch="*",cex=2)
p2[1]*p2[2]*p2[3]
p4[1]*p4[2]*p4[3]
(1382.2-591.73)*1114.4
880899.8/(1382.2^2-1114.4^2)
1382.2/(1382.2^2-1114.4^2)
0.002067337*289.1791
1.96/200
1.96/sqrt(200)
0.35/0.65
0.3/0.65
0.53846158*0.5
0.4615385*0.8
chain.length <- 2000;
J <- 4
yA <- c(62, 60, 63, 59)
yB <- c(63, 67, 71, 64, 65, 66)
yC <- c(68, 66, 71, 67, 68, 68)
yD <- c(56, 62, 60, 61, 63, 64, 63, 59)
n <- c(length(yA), length(yB), length(yC), length(yD))
ybar <- c(mean(yA), mean(yB), mean(yC), mean(yD))
s2 <- c(var(yA), var(yB), var(yC), var(yD)) rm(yA, yB, yC, yD)
s2 <- c(var(yA), var(yB), var(yC), var(yD))
rm(yA, yB, yC, yD)
# Gibbs updates functions
theta.update <- function(mu, sigma2, tau2, J, n, ybar) {  V.theta <- 1 / (1/tau2 + n/sigma2)  theta.hat <- V.theta * (mu/tau2 + n*ybar/sigma2)  rnorm(J, theta.hat, sqrt(V.theta)) }
packages.used=c("rvest", "tibble", "qdap",
"sentimentr", "gplots", "dplyr",
"tm", "syuzhet", "factoextra",
"beeswarm", "scales", "RColorBrewer",
"RANN", "tm", "topicmodels")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
packages.used=c("rvest", "tibble", "qdap",
"sentimentr", "gplots", "dplyr",
"tm", "syuzhet", "factoextra",
"beeswarm", "scales", "RColorBrewer",
"RANN", "tm", "topicmodels")
packages.used=c("rvest", "tibble", "qdap",
"sentimentr", "gplots", "dplyr",
"tm", "syuzhet", "factoextra",
"beeswarm", "scales", "RColorBrewer",
"RANN", "tm", "topicmodels")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library("tidytext")
library("tm")
library("ggplot2")
library("wordcloud")
library("RColorBrewer")
library("dplyr")
packages.used=c("rvest", "tibble", "qdap",
"sentimentr", "gplots", "dplyr",
"tm", "syuzhet", "factoextra",
"beeswarm", "scales", "RColorBrewer",
"RANN", "tm", "topicmodels")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library("tidytext")
library(tidytext)
packages.used=c("rvest", "tibble", "qdap",
"sentimentr", "gplots", "dplyr",
"tm", "syuzhet", "factoextra",
"beeswarm", "scales", "RColorBrewer",
"RANN", "tm", "topicmodels")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library("tidytext"")
library("tm")
library("tidytext")
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
packages.used=c("rvest", "tibble", "qdap",
"sentimentr", "gplots", "dplyr",
"tm", "syuzhet", "factoextra",
"beeswarm", "scales", "RColorBrewer",
"RANN", "tm", "topicmodels")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library("tidytext")
library("RColorBrewer")
library("dplyr")
packages.used=c("rvest", "tibble", "qdap",
"sentimentr", "gplots", "dplyr",
"tm", "syuzhet", "factoextra",
"beeswarm", "scales", "RColorBrewer",
"RANN", "tm", "topicmodels")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library("tidytext")
library("RColorBrewer")
library(RColorBrewer)
install.packages("tm")
install.packages("SnowballC") # for text stemming
install.packages("wordcloud") # word-cloud generator
install.packages("RColorBrewer") # color palettes
install.packages("RColorBrewer")
library("tm")
library("SnowballC")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
install.packages("RColorBrewer") # color palettes
install.packages("RColorBrewer")
library("wordcloud")
folder.path="/Users/Xiaoyu/Documents/GitHub/adsFall2017/project 1/Fall2017-Project1-RNotebook-master/data"
peeches=list.files(path = folder.path, pattern = "*.txt")
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 8, nchar(speeches)-4)
ff.all=Corpus(DirSource(folder.path))
ff.demo=tm_map(ff.demo, removeNumbers)
ff.demo=tm_map(ff.demo, removeNumbers)
ff.demo=Corpus(DirSource(folder.path))
ff.demo=tm_map(ff.demo, removeNumbers)
ff.demo=tm_map(ff.demo, stripWhitespace)
ff.demo=tm_map(ff.demo, content_transformer(tolower))
ff.demo=tm_map(ff.demo, content_transformer(tolower))
folder.path="/Users/Xiaoyu/Documents/GitHub/adsFall2017/project 1/Fall2017-Project1-RNotebook-master/data"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 8, nchar(speeches)-4)
ff.demo=Corpus(DirSource(folder.path))
ff.demo=tm_map(ff.demo, removeNumbers)
ff.demo=tm_map(ff.demo, stripWhitespace)
ff.demo=tm_map(ff.demo, content_transformer(tolower))
ff.demo=tm_map(ff.demo, content_transformer(tolower),lazy=TRUE)
?tm_map
ff.demo=tm_map(ff.demo, content_transformer(tolower))
ff.demo=tm_map(ff.demo, removeWords, stopwords("english"))
ff.demo=tm_map(ff.demo, removeWords, character(0))
folder.path="/Users/Xiaoyu/Documents/GitHub/adsFall2017/project 1/Fall2017-Project1-RNotebook-master/data"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 8, nchar(speeches)-4)
ff.demo=Corpus(DirSource(folder.path,encoding="UTF-8"))
ff.demo=tm_map(ff.demo, removeNumbers)
ff.demo=tm_map(ff.demo, stripWhitespace)
ff.demo=tm_map(ff.demo, content_transformer(tolower))
ff.demo=tm_map(ff.demo, removeWords, stopwords("english"))
ff.demo=tm_map(ff.demo, removePunctuation)
tdm.all=TermDocumentMatrix(ff.all)
ff.demo=tm_map(ff.demo, removeNumbers)
ff.demo=tm_map(ff.demo, stripWhitespace)
ff.demo=tm_map(ff.demo, content_transformer(tolower))
ff.demo=tm_map(ff.demo, removeWords, stopwords("english"))
ff.demo=tm_map(ff.demo, removeWords, character(0))
ff.demo=tm_map(ff.demo, removePunctuation)
ff.demo=tm_map(ff.demo, removeWords, stopwords('english'))
folder.path="/Users/Xiaoyu/Documents/GitHub/adsFall2017/project 1/Fall2017-Project1-RNotebook-master/data"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 59, nchar(speeches)-4)
ff.demo=Corpus(DirSource(folder.path,encoding="UTF-8"))
ff.demo=tm_map(ff.demo, removeNumbers)
ff.demo=tm_map(ff.demo, stripWhitespace)
ff.demo=tm_map(ff.demo, content_transformer(tolower))
folder.path="/Users/Xiaoyu/Documents/GitHub/adsFall2017/project 1/Fall2017-Project1-RNotebook-master/data"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 8, nchar(speeches)-4)
ff.demo=Corpus(DirSource(folder.path,encoding="UTF-8"))
inspect(ff.demo)
prex.out=substr(speeches, 59, nchar(speeches)-4)
ff.demo=Corpus(DirSource(folder.path,encoding="UTF-8"))
inspect(ff.demo)
folder.path="/Users/Xiaoyu/Documents/GitHub/adsFall2017/project 1/Fall2017-Project1-RNotebook-master/data"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 59, nchar(speeches)-4)
ff.demo=Corpus(DirSource(folder.path,encoding="UTF-8"))
ff.demo=tm_map(ff.demo, removeNumbers)
ff.demo=tm_map(ff.demo, stripWhitespace)
ff.demo=tm_map(ff.demo, content_transformer(tolower))
ff.demo=tm_map(ff.demo, removeWords, stopwords('english'))
print(prex.out)
prex.out=substr(speeches, 59, nchar(speeches)-4)
print(prex.out)
print(speeches)
folder.path="/Users/Xiaoyu/Documents/GitHub/adsFall2017/project 1/Fall2017-Project1-RNotebook-master/data/InauguralSpeeches"
speeches=list.files(path = folder.path, pattern = "*.txt")
print(speeches)
prex.out=substr(speeches, 10, nchar(speeches)-4)
print(prex.out)
ff.demo=Corpus(DirSource(folder.path,encoding="UTF-8"))
ff.demo=tm_map(ff.demo, removeNumbers)
ff.demo=tm_map(ff.demo, stripWhitespace)
ff.demo=tm_map(ff.demo, content_transformer(tolower))
ff.demo=tm_map(ff.demo, removeWords, stopwords('english'))
ff.demo=tm_map(ff.demo, removeWords, character(0))
folder.path="/Users/Xiaoyu/Documents/GitHub/adsFall2017/project 1/Fall2017-Project1-RNotebook-master/data/InauguralSpeeches"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 10, nchar(speeches)-4)
ff.demo=Corpus(DirSource(folder.path,encoding="UTF-8"))
print(prex.out)
folder.path="/Users/Xiaoyu/Documents/GitHub/adsFall2017/project 1/Fall2017-Project1-RNotebook-master/data/InauguralSpeeches"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 5, nchar(speeches)-4)
ff.demo=Corpus(DirSource(folder.path,encoding="UTF-8"))
print(prex.out)
folder.path="/Users/Xiaoyu/Documents/GitHub/adsFall2017/project 1/Fall2017-Project1-RNotebook-master/data/InauguralSpeeches"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 59, nchar(speeches)-4)
ff.demo=Corpus(DirSource(folder.path,encoding="UTF-8"))
print(prex.out)
folder.path="/Users/Xiaoyu/Documents/GitHub/adsFall2017/project 1/Fall2017-Project1-RNotebook-master/data/InauguralSpeeches"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 5, nchar(speeches)-4)
ff.demo=Corpus(DirSource(folder.path,encoding="UTF-8"))
print(prex.out)
folder.path="/Users/Xiaoyu/Documents/GitHub/adsFall2017/project 1/Fall2017-Project1-RNotebook-master/data/InauguralSpeeches"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
ff.demo=Corpus(DirSource(folder.path,encoding="UTF-8"))
print(prex.out)
print(speeches)
print(ff.demo)
ff.demo=tm_map(ff.demo, removeNumbers)
ff.demo=tm_map(ff.demo, stripWhitespace)
ff.demo=tm_map(ff.demo, content_transformer(tolower))
ff.demo=tm_map(ff.demo, removeWords, stopwords('english'))
ff.demo=tm_map(ff.demo, removeWords, character(0))
ff.demo=tm_map(ff.demo, removePunctuation)
tdm.all=TermDocumentMatrix(ff.demo)
print(tdm.all)
folder.path="/Users/Xiaoyu/Documents/GitHub/adsFall2017/project 1/Fall2017-Project1-RNotebook-master/data/InauguralSpeeches"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
ff.doc=Corpus(DirSource(folder.path,encoding="UTF-8"))
#print(ff.demo)
ff.doc=tm_map(ff.doc, removeNumbers)
ff.doc=tm_map(ff.doc, stripWhitespace)
ff.doc=tm_map(ff.doc, content_transformer(tolower))
ff.doc=tm_map(ff.doc, removeWords, stopwords('english'))
ff.doc=tm_map(ff.doc, removeWords, character(0))
ff.doc=tm_map(ff.doc, removePunctuation)
tdm.all=TermDocumentMatrix(ff.doc)
tdm.tidy=tidy(tdm.all)
tdm1=as.matrix(tdm.all)
v=sort(rowSums(tdm1),decreasing = TRUE)
summary(v)
wordcloud (ff.doc, scale=c(5,0.5), max.words=100, min.freq=25, random.order=FALSE, rot.per=0.35, use.r.layout=T, random.color=FALSE, colors=brewer.pal(8, “Blues″))
wordcloud (ff.doc, scale=c(5,0.5), max.words=100, min.freq=25, random.order=FALSE, rot.per=0.35, use.r.layout=T, random.color=FALSE, colors=brewer.pal(8, “Blues9″))
wordcloud (ff.doc, scale=c(5,0.5), max.words=100, min.freq=25, random.order=FALSE, rot.per=0.35, use.r.layout=T, random.color=FALSE, colors=brewer.pal(9,"Reds"))
wordcloud (ff.doc, scale=c(5,0.5), max.words=100, min.freq=25, random.order=FALSE, rot.per=0.35, use.r.layout=T, random.color=FALSE, colors=brewer.pal(9,"Reds"))
wordcloud (ff.doc, scale=c(5,0.5), max.words=100, min.freq=1, random.order=FALSE, rot.per=0.35, use.r.layout=T, random.color=FALSE, colors=brewer.pal(9,"Reds"))
wordcloud (ff.doc, scale=c(5,0.5), max.words=200, min.freq=1, random.order=FALSE, rot.per=0.35, use.r.layout=T, random.color=FALSE, colors=brewer.pal(9,"Reds"))
folder.path="/Users/Xiaoyu/Documents/GitHub/adsFall2017/project 1/Fall2017-Project1-RNotebook-master/data/InauguralSpeeches"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
ff.doc=Corpus(DirSource(folder.path,encoding="UTF-8"))
#print(ff.demo)
ff.doc=tm_map(ff.doc, removeNumbers)
ff.doc=tm_map(ff.doc, stripWhitespace)
ff.doc=tm_map(ff.doc, content_transformer(tolower))
ff.doc=tm_map(ff.doc, removeWords, stopwords('english'))
ff.doc=tm_map(ff.doc, removeWords, character(0))
ff.doc=tm_map(ff.doc, removePunctuation)
tdm.all=TermDocumentMatrix(ff.doc)
tdm1=as.matrix(tdm.all)
v=sort(rowSums(tdm1),decreasing = TRUE)
wordcloud (ff.doc, scale=c(5,0.5), max.words=100, min.freq=25, random.order=FALSE, rot.per=0.35, use.r.layout=T, random.color=FALSE, colors=brewer.pal(9,"Reds"))
folder.path="/Users/Xiaoyu/Documents/GitHub/adsFall2017/project 1/Fall2017-Project1-RNotebook-master/data/InauguralSpeeches"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
ff.doc=Corpus(DirSource(folder.path,encoding="UTF-8"))
#print(ff.demo)
ff.doc=tm_map(ff.doc, removeNumbers)
ff.doc=tm_map(ff.doc, stripWhitespace)
ff.doc=tm_map(ff.doc, content_transformer(tolower))
ff.doc=tm_map(ff.doc, removeWords, stopwords('english'))
ff.doc=tm_map(ff.doc, removeWords, character(0))
ff.doc=tm_map(ff.doc, removePunctuation)
ff.doc=tm_map(ff.doc,removeWords,c("upon","shall","can","many","must","make","much","time"))
tdm.all=TermDocumentMatrix(ff.doc)
tdm1=as.matrix(tdm.all)
v=sort(rowSums(tdm1),decreasing = TRUE)
wordcloud (ff.doc, scale=c(5,0.5), max.words=100, min.freq=25, random.order=FALSE, rot.per=0.35, use.r.layout=T, random.color=FALSE, colors=brewer.pal(9,"Reds"))
folder.path="/Users/Xiaoyu/Documents/GitHub/adsFall2017/project 1/Fall2017-Project1-RNotebook-master/data/InauguralSpeeches"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
ff.doc=Corpus(DirSource(folder.path,encoding="UTF-8"))
#print(ff.demo)
ff.doc=tm_map(ff.doc, removeNumbers)
ff.doc=tm_map(ff.doc, stripWhitespace)
ff.doc=tm_map(ff.doc, content_transformer(tolower))
ff.doc=tm_map(ff.doc, removeWords, stopwords('english'))
ff.doc=tm_map(ff.doc, removeWords, character(0))
ff.doc=tm_map(ff.doc, removePunctuation)
ff.doc=tm_map(ff.doc,removeWords,c("upon","shall","can","many","must","make","much","time","let","among"))
tdm.all=TermDocumentMatrix(ff.doc)
tdm1=as.matrix(tdm.all)
v=sort(rowSums(tdm1),decreasing = TRUE)
wordcloud (ff.doc, scale=c(5,0.5), max.words=100, min.freq=25, random.order=FALSE, rot.per=0.35, use.r.layout=T, random.color=FALSE, colors=brewer.pal(9,"Reds"))
folder.path="/Users/Xiaoyu/Documents/GitHub/adsFall2017/project 1/Fall2017-Project1-RNotebook-master/data/InauguralSpeeches"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
ff.doc=Corpus(DirSource(folder.path,encoding="UTF-8"))
#print(ff.demo)
ff.doc=tm_map(ff.doc, removeNumbers)
ff.doc=tm_map(ff.doc, stripWhitespace)
ff.doc=tm_map(ff.doc, content_transformer(tolower))
ff.doc=tm_map(ff.doc, removeWords, stopwords('english'))
ff.doc=tm_map(ff.doc, removeWords, character(0))
ff.doc=tm_map(ff.doc, removePunctuation)
ff.doc=tm_map(ff.doc,removeWords,c("upon","shall","can","many","must","make","much","time","let","among","may","made"))
tdm.all=TermDocumentMatrix(ff.doc)
tdm1=as.matrix(tdm.all)
v=sort(rowSums(tdm1),decreasing = TRUE)
wordcloud (ff.doc, scale=c(5,0.5), max.words=100, min.freq=25, random.order=FALSE, rot.per=0.35, use.r.layout=T, random.color=FALSE, colors=brewer.pal(9,"Reds"))
folder.path="/Users/Xiaoyu/Documents/GitHub/adsFall2017/project 1/data1"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
ff.doc=Corpus(DirSource(folder.path,encoding="UTF-8"))
print(prex.out)
ff.doc=tm_map(ff.doc, removeNumbers)
ff.doc=tm_map(ff.doc, stripWhitespace)
ff.doc=tm_map(ff.doc, content_transformer(tolower))
ff.doc=tm_map(ff.doc, removeWords, stopwords('english'))
ff.doc=tm_map(ff.doc, removeWords, character(0))
ff.doc=tm_map(ff.doc, removePunctuation)
tdm.all=TermDocumentMatrix(ff.doc)
tdm1=as.matrix(tdm.all)
v=sort(rowSums(tdm1),decreasing = TRUE)
wordcloud (ff.doc, scale=c(5,0.5), max.words=100, min.freq=25, random.order=FALSE, rot.per=0.35, use.r.layout=T, random.color=FALSE, colors=brewer.pal(9,"Reds"))
wordcloud (ff.doc, scale=c(5,0.5), max.words=100, min.freq=1, random.order=FALSE, rot.per=0.35, use.r.layout=T, random.color=FALSE, colors=brewer.pal(9,"Reds"))
ff.doc=tm_map(ff.doc, removeNumbers)
ff.doc=tm_map(ff.doc, stripWhitespace)
ff.doc=tm_map(ff.doc, content_transformer(tolower))
ff.doc=tm_map(ff.doc, removeWords, stopwords('english'))
ff.doc=tm_map(ff.doc, removeWords, character(0))
ff.doc=tm_map(ff.doc, removePunctuation)
ff.doc=tm_map(ff.doc,removeWords,c("upon","shall","can","many","must","make","much","time","let","among","may","made"))
tdm.all=TermDocumentMatrix(ff.doc)
tdm1=as.matrix(tdm.all)
v=sort(rowSums(tdm1),decreasing = TRUE)
wordcloud (ff.doc, scale=c(5,0.5), max.words=100, min.freq=1, random.order=FALSE, rot.per=0.35, use.r.layout=T, random.color=FALSE, colors=brewer.pal(9,"Reds"))
ff.doc=tm_map(ff.doc, removeNumbers)
ff.doc=tm_map(ff.doc, stripWhitespace)
ff.doc=tm_map(ff.doc, content_transformer(tolower))
ff.doc=tm_map(ff.doc, removeWords, stopwords('english'))
ff.doc=tm_map(ff.doc, removeWords, character(0))
ff.doc=tm_map(ff.doc, removePunctuation)
ff.doc=tm_map(ff.doc,removeWords,c("upon","shall","can","many","must","make","much","time","let","among","may","made"))
tdm.all=TermDocumentMatrix(ff.doc)
tdm1=as.matrix(tdm.all)
v=sort(rowSums(tdm1),decreasing = TRUE)
wordcloud (ff.doc, scale=c(5,0.5), max.words=200, min.freq=1, random.order=FALSE, rot.per=0.35, use.r.layout=T, random.color=FALSE, colors=brewer.pal(9,"Reds"))
ff.doc=tm_map(ff.doc, removeNumbers)
ff.doc=tm_map(ff.doc, stripWhitespace)
ff.doc=tm_map(ff.doc, content_transformer(tolower))
ff.doc=tm_map(ff.doc, removeWords, stopwords('english'))
ff.doc=tm_map(ff.doc, removeWords, character(0))
ff.doc=tm_map(ff.doc, removePunctuation)
ff.doc=tm_map(ff.doc,removeWords,c("upon","shall","can","many","must","make","much","time","let","among","may","made","will"))
tdm.all=TermDocumentMatrix(ff.doc)
tdm1=as.matrix(tdm.all)
v=sort(rowSums(tdm1),decreasing = TRUE)
wordcloud (ff.doc, scale=c(5,0.5), max.words=100, min.freq=10, random.order=FALSE, rot.per=0.35, use.r.layout=T, random.color=FALSE, colors=brewer.pal(9,"Reds"))
ff.doc=tm_map(ff.doc, removeNumbers)
ff.doc=tm_map(ff.doc, stripWhitespace)
ff.doc=tm_map(ff.doc, content_transformer(tolower))
ff.doc=tm_map(ff.doc, removeWords, stopwords('english'))
ff.doc=tm_map(ff.doc, removeWords, character(0))
ff.doc=tm_map(ff.doc, removePunctuation)
ff.doc=tm_map(ff.doc,removeWords,c("upon","shall","can","many","must","make","much","time","let","among","may","made","will"))
tdm.all=TermDocumentMatrix(ff.doc)
tdm1=as.matrix(tdm.all)
v=sort(rowSums(tdm1),decreasing = TRUE)
wordcloud (ff.doc, scale=c(5,0.5), max.words=100, min.freq=5, random.order=FALSE, rot.per=0.35, use.r.layout=T, random.color=FALSE, colors=brewer.pal(9,"Reds"))
ff.doc=tm_map(ff.doc, removeNumbers)
ff.doc=tm_map(ff.doc, stripWhitespace)
ff.doc=tm_map(ff.doc, content_transformer(tolower))
ff.doc=tm_map(ff.doc, removeWords, stopwords('english'))
ff.doc=tm_map(ff.doc, removeWords, character(0))
ff.doc=tm_map(ff.doc, removePunctuation)
ff.doc=tm_map(ff.doc,removeWords,c("upon","shall","can","many","must","make","much","time","let","among","may","made","will"))
tdm.all=TermDocumentMatrix(ff.doc)
tdm1=as.matrix(tdm.all)
v=sort(rowSums(tdm1),decreasing = TRUE)
wordcloud (ff.doc, scale=c(5,0.5), max.words=100, min.freq=8, random.order=FALSE, rot.per=0.35, use.r.layout=T, random.color=FALSE, colors=brewer.pal(9,"Reds"))
ff.doc=tm_map(ff.doc, removeNumbers)
ff.doc=tm_map(ff.doc, stripWhitespace)
ff.doc=tm_map(ff.doc, content_transformer(tolower))
ff.doc=tm_map(ff.doc, removeWords, stopwords('english'))
ff.doc=tm_map(ff.doc, removeWords, character(0))
ff.doc=tm_map(ff.doc, removePunctuation)
ff.doc=tm_map(ff.doc,removeWords,c("upon","shall","can","many","must","make","much","time","let","among","may","made","will"))
tdm.all=TermDocumentMatrix(ff.doc)
tdm1=as.matrix(tdm.all)
v=sort(rowSums(tdm1),decreasing = TRUE)
wordcloud (ff.doc, scale=c(5,0.5), max.words=100, min.freq=1, random.order=FALSE, rot.per=0.35, use.r.layout=T, random.color=FALSE, colors=brewer.pal(9,"Reds"))
ff.doc=tm_map(ff.doc, removeNumbers)
ff.doc=tm_map(ff.doc, stripWhitespace)
ff.doc=tm_map(ff.doc, content_transformer(tolower))
ff.doc=tm_map(ff.doc, removeWords, stopwords('english'))
ff.doc=tm_map(ff.doc, removeWords, character(0))
ff.doc=tm_map(ff.doc, removePunctuation)
ff.doc=tm_map(ff.doc,removeWords,c("upon","shall","can","many","must","make","much","time","let","among","may","made","will"))
tdm.all=TermDocumentMatrix(ff.doc)
tdm1=as.matrix(tdm.all)
v=sort(rowSums(tdm1),decreasing = TRUE)
wordcloud (ff.doc, scale=c(5,0.5), max.words=100, min.freq=2, random.order=FALSE, rot.per=0.35, use.r.layout=T, random.color=FALSE, colors=brewer.pal(9,"Reds"))
wordcloud (ff.doc, scale=c(5,0.5), max.words=100, min.freq=4, random.order=FALSE, rot.per=0.35, use.r.layout=T, random.color=FALSE, colors=brewer.pal(9,"Reds"))
wordcloud (ff.doc, scale=c(5,0.5), max.words=100, min.freq=10, random.order=FALSE, rot.per=0.35, use.r.layout=T, random.color=FALSE, colors=brewer.pal(9,"Reds"))
wordcloud (ff.doc, scale=c(5,0.5), max.words=100, min.freq=5, random.order=FALSE, rot.per=0.35, use.r.layout=T, random.color=FALSE, colors=brewer.pal(9,"Reds"))
wordcloud (ff.doc, scale=c(4,0.5), max.words=100, min.freq=5, random.order=FALSE, rot.per=0.35, use.r.layout=T, random.color=FALSE, colors=brewer.pal(9,"Reds"))
wordcloud (ff.doc, scale=c(3,0.5), max.words=100, min.freq=5, random.order=FALSE, rot.per=0.35, use.r.layout=T, random.color=FALSE, colors=brewer.pal(9,"Reds"))
install.packages("tm")  # for text mining
install.packages("SnowballC") # for text stemming
install.packages("wordcloud") # word-cloud generator
install.packages("RColorBrewer") # color palettes
install.packages("SnowballC")
install.packages("tm")
install.packages("RColorBrewer")
install.packages("wordcloud")
install.packages("tm")
install.packages("wordcloud")
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
install.packages("tm")
install.packages("tm")  # for text mining
install.packages("tm")
library("tm")
folder.path="/Users/Xiaoyu/Documents/GitHub/adsFall2017/project 1/data1"
folder.path="/Users/Xiaoyu/Documents/GitHub/adsFall2017/project 1/data1"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
ff.doc=Corpus(DirSource(folder.path,encoding="UTF-8"))
#print(prex.out)
ff.doc=tm_map(ff.doc, removeNumbers)
ff.doc=tm_map(ff.doc, stripWhitespace)
ff.doc=tm_map(ff.doc, content_transformer(tolower))
ff.doc=tm_map(ff.doc, removeWords, stopwords('english'))
ff.doc=tm_map(ff.doc, removeWords, character(0))
ff.doc=tm_map(ff.doc, removePunctuation)
ff.doc=tm_map(ff.doc,removeWords,c("upon","shall","can","many","must","make","much","time","let","among","may","made","will"))
tdm.all=TermDocumentMatrix(ff.doc)
tdm1=as.matrix(tdm.all)
v=sort(rowSums(tdm1),decreasing = TRUE)
wordcloud (ff.doc, scale=c(3,0.5), max.words=100, min.freq=5, random.order=FALSE, rot.per=0.35, use.r.layout=T, random.color=FALSE, colors=brewer.pal(9,"Reds"))
# Install
install.packages("tm")  # for text mining
install.packages("SnowballC") # for text stemming
install.packages("tm")
folder.path="/Users/Xiaoyu/Documents/GitHub/adsFall2017/project 1/data1"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
ff.doc=Corpus(DirSource(folder.path,encoding="UTF-8"))
folder.path="/Users/Xiaoyu/Documents/GitHub/adsFall2017/project 1/data1"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
ff.doc=Corpus(DirSource(folder.path,encoding="UTF-8"))
